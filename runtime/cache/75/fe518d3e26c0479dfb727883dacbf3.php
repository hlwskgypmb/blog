<?php
//000000000010
 exit();?>
think_serialize:a:12:{s:2:"id";i:11;s:9:"user_name";s:6:"老白";s:5:"title";s:49:"SOA（面向服务架构）与 微服务的区别";s:4:"cont";s:6491:"[strong]1什么是SOA[/strong][br]
SOA（Service-Oriented Architecture）面向服务架构，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用。服务层是SOA的基础，可以直接被应用调用，从而有效控制系统中与软件代理交互的人为依赖性。
SOA是一种粗粒度、松耦合服务架构，服务之间通过简单、精确定义接口进行通讯，不涉及底层编程接口和通讯模型。SOA可以看作是B/S模型、XML（标准通用标记语言的子集）/Web Service技术之后的自然延伸。
SOA将能够帮助软件工程师们站在一个新的高度理解企业级架构中的各种组件的开发、部署形式，它将帮助企业系统架构者以更迅速、更可靠、更具重用性架构整个业务系统。较之以往，以SOA架构的系统能够更加从容地面对业务的急剧变化。
[hr]
[strong]2微服务架构[/strong][br]
微服务架构在某种程度上是面向服务的架构SOA继续发展的下一步。基本上，这种架构类型是开发软件，网络或移动应用程序作为独立服务套件（又称微服务）的一种特殊方式。这些服务的创建仅限于一个特定的业务功能，如用户管理、用户角色、电子商务车、搜索引擎、社交媒体登录等。此外，它们是完全独立的，也就是说它们可以写入不同的编程语言并使用不同的数据库。集中式服务管理几乎不存在，微服务使用轻量级HTTP、REST或Thrift API进行通信。
这个词本身起源于2011年5月在威尼斯附近举行的软件架构师研讨会。他们第一次使用“微服务”这个术语来描述参与者看到的一个共同的架构风格，其中许多参会者都在探索相似的内容。2012年5月，同一个团队决定将“微服务”作为最合适的名称。然而实际上，微软、亚马逊、Netflix和Facebook等主要的科技公司已经在微服务架构方面工作了十多年。
乍一看，微服务架构似乎谈论的是与SOA相同的事情。不过，如果引用微软服务领域的先驱Martin Flower的话，他曾经说过，“我们应该把SOA看作微服务的超集”。
[hr]
[strong]3区别[/strong][br]
img[/static/file/20190325/37fed151d22ced520e240ee71779d2d6.png] 
[table][colgroup:2]
[thead]
[tr][th] SOA [/th][th] 微服务 [/th][/tr]
[/thead]
[tbody]
[tr][td] 应用程序服务的可重用性的最大化 [/td][td] 专注于解耦 [/td][/tr]
[tr][td] 系统性的改变需要修改整体 [/td][td] 系统性的改变是创建一个新的服务 [/td][/tr]
[tr][td] DevOps和持续交付正在变得流行，但还不是主流 [/td][td] 强烈关注DevOps和持续交付 [/td][/tr]
[tr][td] 专注于业务功能重用 [/td][td] 更重视“上下文边界”的概念 [/td][/tr]
[tr][td] 通信使用企业服务总线ESB [/td][td] 对于通信而言，使用较少精细和简单的消息系统 [/td][/tr]
[tr][td] 支持多种消息协议 [/td][td] 使用轻量级协议，例如HTTP，REST或Thrift API [/td][/tr]
[tr][td] 对部署到它的所有服务使用通用平台 [/td][td] 应用程序服务器不是真的被使用，通常使用云平台 [/td][/tr]
[tr][td] 容器（如Docker）的使用不太受欢迎 [/td][td] 容器在微服务方面效果很好 [/td][/tr]
[tr][td] SOA服务共享数据存储 [/td][td] 每个微服务可以有一个独立的数据存储 [/td][/tr]
[tr][td] 共同的治理和标准 [/td][td] 轻松的治理，更加关注团队协作和选择自由 [/td][/tr]
[/tbody]
[/table]
下面进一步解释上表所述的不同之处：
开发方面 - 在这两种体系结构中，可以使用不同的编程语言和工具开发服务，从而将技术多样性带入开发团队。开发可以在多个团队中组织，但是在SOA中，每个团队都需要了解常见的通信机制。另一方面，使用微服务，服务可以独立于其他服务运行和部署。因此，频繁部署新版本的微服务或独立扩展服务会更容易。您可以在这里进一步阅读有关微服务的这些好处。
“上下文边界” - SOA鼓励组件的共享，而微服务尝试通过“上下文边界”来最小化共享。上下文边界是指以最小的依赖关系将组件及其数据耦合为单个单元。由于SOA依靠多个服务来完成业务请求，构建在SOA上的系统可能比微服务要慢。
通信 - 在SOA中，ESB可能成为影响整个系统的单一故障点。由于每个服务都通过ESB进行通信，如果其中一个服务变慢，可能会阻塞ESB并请求该服务。另一方面，微服务在容错方面要好得多。例如，如果一个微服务存在内存错误，那么只有该微服务会受到影响。所有其他微服务将继续定期处理请求。
互操作性 - SOA通过消息中间件组件促进了多种异构协议的使用。微服务试图通过减少集成选择的数量来简化架构模式。因此，如果您想要在异构环境中使用不同协议来集成多个系统，则需要考虑SOA。如果您的所有服务都可以通过相同的远程访问协议访问，那么微服务对您来说是一个更好的选择。
大小Size - 最后一点但并非最不重要的一点，SOA和微服务的主要区别在于规模和范围。微服务架构中的前缀“微”是指内部组件的粒度，意味着它们必须比SOA架构的服务往往要小得多。微服务中的服务组件通常有一个单一的目的，他们做得很好。另一方面，在SOA服务中通​​常包含更多的业务功能，并且通常将它们实现为完整的子系统。
[hr]
[strong]4结论[/strong][br]
我们不能简单地说一种架构比另一种架构更好。这主要取决于您正在构建的应用程序的目的。SOA更适合需要与许多其他应用程序集成的大型复杂企业应用程序环境。这就是说，小型应用程序不适合SOA架构，因为它们不需要消息中间件组件。而微服务架构，在另一方面，是更适合于较小和良好的分割，基于Web的系统。另外，如果您正在开发移动或Web应用程序，那么微服务作为开发人员可以为您提供更大的控制权。最后，我们可以得出结论，因为它们服务于不同的目的，微服务和SOA确实是不同类型的体系结构。

参考： a(https://blog.csdn.net/chszs/article/details/78515231 )[https://blog.csdn.net/chszs/article/details/78515231 ] ";s:6:"to_top";i:0;s:3:"pic";s:58:"/static/head/20170726/e622618cf8c469ef33c5a5e31dc2f58c.png";s:7:"see_num";i:13;s:9:"argue_num";i:0;s:7:"is_best";i:0;s:11:"create_time";s:19:"2019-03-25 11:24:20";s:7:"type_id";i:4;s:4:"type";s:6:"其他";}